@page "/"
@using DeedDescriptor.Objects
@using System.Globalization

<RadzenFileInput @bind-Value=@bearingAndDistanceRawData TValue="byte[]" Style="width: 100%"
                 Accept="text/plain"
                 Change=@(args => OnChange(args, "FileInput"))
                 InputAttributes="@(new Dictionary<string,object>(){ { "aria-label", "select file" }})" />

<RadzenTabs TabPosition="TabPosition.Top" Class="w-100 my-0 mx-auto" RenderMode="TabRenderMode.Client">
    <Tabs>
        <RadzenTabsItem Text="Point Data">
            <RadzenDataList Data="@shapes">
                <Template Context="shape">
                    <DeedDescriptor.Components.ShapeWrapperComponent Shape="shape" />
                </Template>
            </RadzenDataList>
        </RadzenTabsItem>
        <RadzenTabsItem Text="Deed Description">
            <RadzenCard Style="height:100%">
                @if (shapes != null && shapes.Any())
                {
                    <RadzenTextArea Rows="25" Style="width:100%;height:100%;word-wrap:normal;" Value=@string.Join("",shapes.Select(s => s.TranslateToDeedDescription())) />
                }
            </RadzenCard>
        </RadzenTabsItem>
    </Tabs>
</RadzenTabs>


@code {
    private byte[] bearingAndDistanceRawData = null;
    private List<Shape> shapes { get; set; }
    
    void OnChange(byte[] value, string name)
    {
        if (value == null)
        {
            shapes = null;
        }
        else
        {
            var base64StringData = System.Text.Encoding.UTF8.GetString(bearingAndDistanceRawData, 0, bearingAndDistanceRawData.Length);
            var decodedByteArray = Convert.FromBase64String(base64StringData.Split(',')[1]);
            var lines = new List<string>();

            shapes = new List<Shape>();
            using (StreamReader reader = new StreamReader(new MemoryStream(decodedByteArray)))
            {
                var line = string.Empty;
                bool startFound = false;

                while ((line = reader.ReadLine()) != null)
                {
                    if (line.Trim() == "Start")
                    {
                        startFound = true;
                        continue;
                    }

                    // Add lines to the list if "Start" has been found or if "Start" is not present
                    if (startFound)
                    {
                        lines.Add(line);
                    }
                }
            }

            for(int i = 0; i < lines.Count; i++)
            {
                var line = lines[i];
                if (line != null)
                {
                    var header = GetHeader(line);
                    if (!shapes.Any() || shapes.FirstOrDefault().Point != header.Item1) //Item1 represents a point
                    {
                        line = lines[++i];
                        if (line.TrimStart().StartsWith("Arc"))
                        {
                            shapes.Add(new Curve(header.Item1, header.Item2, line, lines[++i], lines[++i], lines[++i]));
                        }
                        else
                        {
                            shapes.Add(new Line(header.Item1, header.Item2, line));
                        }
                    }
                }
            }

        }
    }

    private (string, string) GetHeader(string headerRow)
    {
        // Split the line into tokens, removing empty entries
        string[] tokens = headerRow.Split(new char[] { ' ', '\t' }, StringSplitOptions.RemoveEmptyEntries);

        // Ensure there are enough tokens to process
        if (tokens.Length >= 3)
        {
            int numTokens = tokens.Length;

            // Attempt to parse the last two tokens as doubles (GPS coordinates)
            bool isCoordinate1Numeric = double.TryParse(tokens[numTokens - 2], NumberStyles.Any, CultureInfo.InvariantCulture, out _);
            bool isCoordinate2Numeric = double.TryParse(tokens[numTokens - 1], NumberStyles.Any, CultureInfo.InvariantCulture, out _);

            int numCoordinates = (isCoordinate1Numeric && isCoordinate2Numeric) ? 2 : 0;

            // Calculate the number of description tokens
            int numDescriptionTokens = numTokens - numCoordinates - 1; // Exclude point number and coordinates

            // Get the point number
            string pointNumber = tokens[0];

            // Get the description tokens
            string[] descriptionTokens = tokens.Skip(1).Take(numDescriptionTokens).ToArray();

            // Join the description tokens into a single string
            string description = string.Join(" ", descriptionTokens);

            return (pointNumber, description);

        }
        else
        {
            return ("0", "");
        }
    }

}
